from bottle import *
from datetime import datetime, timedelta
from werkzeug.utils import secure_filename
from GetInformation import *
from AdvancedFernetDataEncryption import *
import os
#CZon3s3rvic3
@route('/')
def home():
    #---- Runs the html file in the directory HTML/index.tpl ----
    return static_file("/index.html", root=os.path.abspath("HTML"))

@post("/loggedIn")
def LoggedIn():
    password = request.forms.get("TechnicianPassword")
    EncryptedPassword = dataEncrpytion(password)
    print("Encrypted", EncryptedPassword)
    if Checklogin(EncryptedPassword):
        #---- Creates a cookie with the encrypted SessionToken generated by the username at this time ----
        #---- (NOTE: COOKIE WILL EXPIRE 9 HOUR AFTER CREATION)
        response.set_cookie("TechnicianSession", dataEncrpytion("Technician"), expires=time.mktime((datetime.now() + timedelta(hours=9)).timetuple()))
        return '''<meta http-equiv="refresh" content="0; URL='./CreateMobileOrder'" />'''
    #---- Will proceed to checkin page if is Organizer, but otherwise will return to home/login page ----
    return '''<meta http-equiv="refresh" content="0; URL='./'" />'''

@route("/CreateStandardOrder")
def createStandardOrder():
    if request.get_cookie("TechnicianSession") is not None:
        if dataDecryption(request.get_cookie("TechnicianSession")) == "Technician":
            templateDictionary = getWorkOrder(True)
            return template("./HTML/StandardWorkOrder.tpl", templateDictionary)
            #return static_file("./StandardWorkOrder.html", root=os.path.abspath("HTML"))
    return '''<meta http-equiv="refresh" content="0; URL='./'" />'''

@route("/CreateMobileOrder")
def createStandardOrder():
    if request.get_cookie("TechnicianSession") is not None:
        if dataDecryption(request.get_cookie("TechnicianSession")) == "Technician":
            templateDictionary = getWorkOrder(False)
            return template("./HTML/StandardWorkOrder.tpl", templateDictionary)
            #return static_file("./MobileWorkOrder.html", root=os.path.abspath("HTML"))
    return '''<meta http-equiv="refresh" content="0; URL='./'" />'''

@post("/CreatedInvoice")
def createdInvoice():
    EmployeeName = request.forms.get("EmployeeName")
    dateCreated = request.forms.get("CreatedDate")
    customerName = request.forms.get("customerName")
    customerEmail = request.forms.get("customerEmail")
    customerPhoneNumber = request.forms.get("CustomerPhoneNumber")
    AlternativePhoneNumber = request.forms.get("AltPhoneNumber")
    SystemAdminPassword = request.forms.get("SystemPassword")
    TroubleReported = request.forms.get("TroubleReported")
    SaleQuantity = request.forms.getall("Quantity")
    SaleItemDescription = request.forms.getall("ItemDescription")
    SaleItemPrice = request.forms.getall("price")
    EquipmentName = request.forms.getall("EquipmentName")
    EquipmentSerialNumber = request.forms.getall("SerialNumber")
    if len(SaleQuantity) != len(SaleItemDescription) != len(SaleItemPrice):
        return '''<meta http-equiv="refresh" content="0; URL='./CreateMobileOrder'" />'''
    if len(EquipmentName) != len(EquipmentSerialNumber):
        return '''<meta http-equiv="refresh" content="0; URL='./CreateMobileOrder'" />'''
    if customerPhoneNumber is None and customerEmail is None:
        return '''<meta http-equiv="refresh" content="0; URL='./CreateMobileOrder'" />'''
    print(EmployeeName)
    print(dateCreated)
    print(customerName)
    print(customerEmail)
    print(customerPhoneNumber)
    print(AlternativePhoneNumber)
    print(SystemAdminPassword)
    print(TroubleReported)
    print(SaleQuantity)
    print(SaleItemDescription)
    print(SaleItemPrice)
    print(EquipmentName)
    print(EquipmentSerialNumber)
    return '''<meta http-equiv="refresh" content="0; URL='./CreateMobileOrder'" />'''


@route('/HTML/<filename>')
def server_HTML(filename):
    #---- Returns the static file for all HTML files used ----
    return static_file(filename, root=os.path.abspath('HTML'))

@route('/Images/<filename>')
def server_Images(filename):
    #---- RReturns the static file for all Images used ----
    return static_file(filename, root=os.path.abspath('Images'))

@route('/Scripts/<filename>')
def server_Scripts(filename):
    #---- Returns the static file for all Scripts used ----
    return static_file(filename, root=os.path.abspath('Scripts'))



data, serverData = readConfig()
run(host=serverData.get("webserver")[0:serverData.get("webserver").find(":")], port=os.environ.get('PORT', 5000), debug=True) 
#---- Use the below if you have a specific port you would like to run it instead of 5000 ----
#run(host=data.get("webserver")[0:data.get("webserver").find(":")], port=data.get("webserver")[data.get("webserver").find(":")+1: len(data.get("webserver"))], debug=True)
